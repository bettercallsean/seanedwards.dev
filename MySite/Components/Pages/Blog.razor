@page "/blog"
@page "/blog/page/{PageNumber:int}"
@using Markdig
@using MySite.Services.Interfaces
@using MySite.Shared.Dtos
@using global::AutoMapper
@inject IBlogService blogService
@inject IMapper mapper
@inject NavigationManager navigationManager

@if (BlogPostUrls is null)
{
    <h1>Loading...</h1>
}
else
{
    @foreach (var slug in BlogPostUrls)
    {
        <BlogPost Slug="@slug" />
        <hr />
    }
    <div class="container">
        <div class="row button-row">
            <div class="col d-flex justify-content-start">
                <a class="btn btn-primary" style="visibility: @(PageNumber > 1 ? "visible" : "hidden")" href="/blog/page/@(PageNumber - 1)">Newer posts</a>
            </div>
            <div class="col">
            </div>
            <div class="col d-flex justify-content-end">
                <a class="btn btn-primary" style="visibility: @(PageNumber < Math.Round((double)BlogPostsCount / 5, MidpointRounding.ToPositiveInfinity) ? "visible" : "hidden")" href="/blog/page/@(PageNumber + 1)">Older posts</a>
            </div>

        </div>
    </div>
}

@code {
    [Parameter]
    public int PageNumber { get; set; }

    private List<string>? BlogPostUrls { get; set; }

    private static int BlogPostsCount { get; set; }

    private static int TotalNumberOfPages => (int)Math.Round((double)BlogPostsCount / 5, MidpointRounding.ToPositiveInfinity);

    protected async override Task OnInitializedAsync()
    {
        PageNumber = PageNumber == 0 ? 1 : PageNumber;

        BlogPostsCount = await GetBlogPostsCountAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        if (PageNumber <= 0 || PageNumber > TotalNumberOfPages)
        {
            navigationManager.NavigateTo("/blog");
            return;
        }

        await Task.Delay(1);

        await LoadBlogPostsAsync();
    }

    private async Task LoadBlogPostsAsync()
    {
        var blogPostUrls = await GetAllBlogPostUrlSlugsAsync();

        if (blogPostUrls is null) return;

        BlogPostUrls = blogPostUrls;
    }

    private async Task<int> GetBlogPostsCountAsync()
    {
        return await blogService.GetBlogPostsCountAsync();
    }

    private async Task<List<string>?> GetAllBlogPostUrlSlugsAsync()
    {
        return await blogService.GetAllBlogPostUrlSlugsAsync(PageNumber);
    }
}