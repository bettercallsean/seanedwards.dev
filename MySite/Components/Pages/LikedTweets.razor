@page "/likedtweets"
@page "/likedtweets/{date}"
@using System.Globalization
@using global::AutoMapper
@using MySite.Models
@using MySite.Services
@inject ITweetService tweetService
@inject IMapper mapper
@inject NavigationManager navigationManager
@inject ILogger<LikedTweets> logger

@if (Loading)
{
    <Loading IsLoading="true" />
}
else
{
    if (DateIsInTheFuture)
    {
        <FutureTweets FutureDate="@TweetsDate"/>
    }
    else
    {
        <div class="container">
            <div class="row align-items-center date-navigator">
                <a class="btn btn-primary col-sm" href="/likedtweets/@TweetsDate.Date.AddDays(1).ToString("dd-MM-yyyy")" style="visibility: @(TweetsDate != DateTime.Today ? "visible" : "hidden")">
                        @(TweetsDate == DateTime.Today.AddDays(-1)
                        ? "Today"
                        : TweetsDate.Date.AddDays(1).ToString(TweetsDate.Year == DateTime.Today.Year
                            ? "dddd d MMMM"
                            : "dddd d MMMM yyyy"))
                </a>

                <h3 class="col">@PageTitle</h3>

                <a class="btn btn-primary col-sm" href="/likedtweets/@TweetsDate.Date.AddDays(-1).ToString("dd-MM-yyyy")" style="visibility: @(EarliestTweet is not null && EarliestTweet.LikedDate != TweetsDate ? "visible" : "hidden")">
                        @(TweetsDate == DateTime.Today
                        ? "Yesterday"
                        : TweetsDate.Date.AddDays(-1).ToString(TweetsDate.Year == DateTime.Today.Year
                            ? "dddd d MMMM"
                            : "dddd d MMMM yyyy"))
                </a>

            </div>
            @if (Tweets?.Count > 0)
            {
                <div class="d-flex flex-column align-items-center">
                @foreach (var tweet in Tweets)
                {
                    <div class="tweet">
                        <a href="@tweet.TweetLink" target="_blank">
                            <img src="@tweet.Base64TweetScreenshot"/>
                        </a>
                        <a href="@tweet.TweetLink" target="_blank">
                            <p>@tweet.TweetLink</p>
                        </a>
                    </div>
                }
                </div>
            }
            else
            {
                if (TweetsDate == DateTime.Today)
                {
                    <h3>No liked tweets yet!</h3>
                }
                else
                {
                    <h3>No liked tweets for today!</h3>
                }
            }
        </div>
    }
}


@code {
    [Parameter]
    public string? Date { get; set; }

    private DateTime TweetsDate { get; set; }
    private List<LikedTweet>? Tweets { get; set; }
    private bool Loading { get; set; }
    private string? PageTitle { get; set; }
    private bool DateIsInTheFuture { get; set; }
    private static LikedTweet? EarliestTweet { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Loading = true;

        await Task.Delay(1);

        await Task.Run(GetEarliestTweetAsync);

        if (Date is not null)
        {
            ParseDateParameter();
        }
        else
        {
            TweetsDate = DateTime.Today;
            Date = DateTime.Today.ToString("dd-MM-yyyy");
        }


        SetPageTitle();

        await Task.Run(LoadLikedTweetsAsync);

        Loading = false;
    }

    private void ParseDateParameter()
    {
        var validDate = DateTime.TryParseExact(Date, "dd-MM-yyyy", CultureInfo.CurrentCulture, DateTimeStyles.None, out var tweetDate);

        if (validDate)
        {
            TweetsDate = tweetDate;

            if (EarliestTweet?.LikedDate > TweetsDate)
                NavigateToToday();

            if (tweetDate > DateTime.Today)
            {
                DateIsInTheFuture = true;
                Loading = false;
                return;
            }
        }
        else
        {
            logger.LogInformation("Invalid date entered {Date}", Date);
            NavigateToToday();
        }
    }

    private void SetPageTitle()
    {
        if (TweetsDate == DateTime.Today)
        {
            PageTitle = "Today";
        }
        else if (TweetsDate == DateTime.Today.AddDays(-1))
        {
            PageTitle = "Yesterday";
        }
        else
        {
            PageTitle = TweetsDate.ToString(TweetsDate.Year == DateTime.Today.Year
                ? "dddd d MMMM"
                : "dddd d MMMM yyyy");
        }
    }

    private async Task LoadLikedTweetsAsync()
    {
        if (Tweets == null || Tweets.Count == 0)
        {
            var tweets = await tweetService.GetLikedTweetsAsync(TweetsDate);
            logger.LogInformation("{Count} results returned from API", tweets?.Count);

            Tweets = mapper.Map<List<LikedTweet>>(tweets);
        }
    }

    private async Task GetEarliestTweetAsync()
    {
        if (EarliestTweet == null)
        {
            var earliestTweet = await tweetService.GetEarliestLikedTweetAsync();
            EarliestTweet = mapper.Map<LikedTweet>(earliestTweet);
        }
    }

    private void NavigateToTweetDate(DateTime tweetsDate)
    {
        navigationManager.NavigateTo($"/likedtweets/{tweetsDate:dd-MM-yyyy}");
    }

    private void NavigateToToday()
    {
        navigationManager.NavigateTo($"/likedtweets/{DateTime.Today:dd-MM-yyyy}");
    }
}
